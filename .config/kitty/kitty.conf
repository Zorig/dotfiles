#: Fonts {{{

#: kitty has very powerful font management. You can configure
#: individual font faces and even specify special fonts for particular
#: characters.

# font_family      monospace
# bold_font        auto
# italic_font      auto
# bold_italic_font auto
font_family JetBrainsMonoNerdFontCompleteM-Medium
bold_font JetBrainsMonoNerdFontCompleteM-ExtraBold
italic_font JetBrainsMonoNerdFontCompleteM-Italic
bold_italic_font JetBrainsMonoNerdFontCompleteM-Bold-Italic

#: You can specify different fonts for the bold/italic/bold-italic
#: variants. To get a full list of supported fonts use the `kitty
#: +list-fonts` command. By default they are derived automatically, by
#: the OSes font system. When bold_font or bold_italic_font is set to
#: auto on macOS, the priority of bold fonts is semi-bold, bold,
#: heavy. Setting them manually is useful for font families that have
#: many weight variants like Book, Medium, Thick, etc. For example::

#:     font_family      Operator Mono Book
#:     bold_font        Operator Mono Medium
#:     italic_font      Operator Mono Book Italic
#:     bold_italic_font Operator Mono Medium Italic

# font_size 11.0
font_size 12

#: Font size (in pts)

window_border_width 1pt

#: The width of window borders. Can be either in pixels (px) or pts
#: (pt). Values in pts will be rounded to the nearest number of pixels
#: based on screen resolution. If not specified the unit is assumed to
#: be pts. Note that borders are displayed only when more than one
#: window is visible. They are meant to separate multiple windows.

window_padding_width 5

#: The window padding (in pts) (blank area between the text and the
#: window border). A single value sets all four sides. Two values set
#: the vertical and horizontal sides. Three values set top, horizontal
#: and bottom. Four values set top, right, bottom and left.

hide_window_decorations titlebar-only

#: Hide the window decorations (title-bar and window borders) with
#: yes. On macOS, titlebar-only can be used to only hide the titlebar.
#: Whether this works and exactly what effect it has depends on the
#: window manager/operating system. Note that the effects of changing
#: this setting when reloading config are undefined.


background_opacity 0.95
dynamic_background_opacity yes

map cmd+1 goto_tab 1
map cmd+2 goto_tab 2
map cmd+3 goto_tab 3
map cmd+4 goto_tab 4


# BEGIN_KITTY_THEME
# Tokyo Night Storm
include current-theme.conf
# END_KITTY_THEME

click_interval 0.5
mouse_hide_wait 3
repaint_delay 20
input_delay 0
sync_to_monitor no

cursor_shape block
cursor_blink_interval 0

# LAYOUT

enabled_layouts splits:split_axis=horizontal

# Create a new window splitting the space used by the existing one so that
# the two windows are placed one above the other
map cmd+shift+- launch --location=hsplit

# Create a new window splitting the space used by the existing one so that
# the two windows are placed side by side
map cmd+shift+\ launch --location=vsplit

# Create a new window splitting the space used by the existing one so that
# the two windows are placed side by side if the existing window is wide or
# one above the other if the existing window is tall.
map F4 launch --location=split

# Rotate the current split, chaging its split axis from vertical to
# horizontal or vice versa
map F7 layout_action rotate

# Move the active window in the indicated direction
map shift+up move_window up
map shift+left move_window left
map shift+right move_window right
map shift+down move_window down

# Switch focus to the neighboring window in the indicated direction
map cmd+shift+h neighboring_window left
map cmd+shift+l neighboring_window right
map cmd+shift+k neighboring_window up
map cmd+shift+j neighboring_window down

# Set window size
map ctrl+[ layout_action decrease_num_full_size_windows
map ctrl+] layout_action increase_num_full_size_windows
